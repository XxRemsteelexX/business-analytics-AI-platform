generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  companyName   String?
  jobTitle      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  uploadedFiles    UploadedFile[]
  analysisSessions AnalysisSession[]
  formSubmissions  FormSubmission[]
}

model UploadedFile {
  id          String   @id @default(cuid())
  userId      String
  filename    String
  originalName String
  mimeType    String
  size        Int
  filepath    String
  createdAt   DateTime @default(now())

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysisSessions AnalysisSession[]
}

model AnalysisSession {
  id            String   @id @default(cuid())
  userId        String
  fileId        String
  sessionName   String?
  summary       String?
  insights      String?
  chartData     Json?
  chatHistory   Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  file UploadedFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model FormSubmission {
  id         String   @id @default(cuid())
  userId     String?
  name       String
  email      String
  subject    String?
  message    String
  formType   String   @default("contact")
  status     String   @default("new")
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
